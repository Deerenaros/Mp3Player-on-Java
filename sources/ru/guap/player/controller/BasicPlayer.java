package ru.guap.player.controller;import ru.guap.player.events.*;import java.io.File;import java.util.Map;public class BasicPlayer implements javazoom.jlgui.basicplayer.BasicPlayerListener {		javazoom.jlgui.basicplayer.BasicPlayer myPlayer;	javazoom.jlgui.basicplayer.BasicController myControll;	boolean myIsPlaying;		public Event basicPlayerEvents;	public BasicPlayer () {		myIsPlaying = false;		myPlayer = new javazoom.jlgui.basicplayer.BasicPlayer ();		basicPlayerEvents = new Event ();		myControll = (javazoom.jlgui.basicplayer.BasicController) myPlayer;		myPlayer.addBasicPlayerListener ( this );	}		public boolean isPlaying () {		return myIsPlaying;	}		public void setTrack ( File f ) throws Exception {	}	public void play ( File f ) throws Exception {		myIsPlaying = true;		System.out.println ( f.toString () );		myPlayer.open ( f );		myControll.play ();				// Set Volume (0 to 1.0).		// setGain should be called after control.play().		myControll.setGain ( 0.85 );				// Set Pan (-1.0 to 1.0).		// setPan should be called after control.play().		myControll.setPan ( 0.0 );		// If you want to pause/resume/pause the played file then		// write a Swing player and just call control.pause(),		// control.resume() or control.stop().					// Use control.seek(bytesToSkip) to seek file		// (i.e. fast forward and rewind). seek feature will		// work only if underlying JavaSound SPI implements		// skip(...). True for MP3SPI (JavaZOOM) and SUN SPI's		// (WAVE, AU, AIFF).	}		public void pause () throws Exception {		myIsPlaying = false;		myPlayer.pause ();	}		public void stop () throws Exception {		myIsPlaying = false;		myPlayer.stop ();	}		public void opened ( Object stream, Map properties ) {		// Pay attention to properties. It's useful to get duration, 		// bitrate, channels, even tag such as ID3v2.		//System.out.println ("opened : "+properties.toString());			}		public void progress ( int bytesread, long microseconds, byte[] pcmdata, Map properties ) {		// Pay attention to properties. It depends on underlying JavaSound SPI		// MP3SPI provides mp3.equalizer.		//System.out.println ("progress : "+properties.toString());	}		public void stateUpdated ( javazoom.jlgui.basicplayer.BasicPlayerEvent event ) {	}		public void setController ( javazoom.jlgui.basicplayer.BasicController controller ) {		//System.out.println ("setController : "+controller);	}		public void display ( String msg ) {		//System.out.println(msg);	}}